Successfully validate and decrypt SignedEncryptedPseudonym - Happy Flow
=======================================================================
Tags: signed-encrypted-pseudonym,happy-flow,@bsnkeiddo-4656@

* Load dataset from "/v1/signed-encrypted-pseudonym/happy_flow.yaml"
* Target default endpoint "/signed-encrypted-pseudonym"

### Given

A SignedEncryptedPseudonym, SP-key, schemekey and closingkey is provided as input for the decryption component

### When

The SignedEncryptedPseudonym and keys are validated, the SignedEncryptedPseudonym is succesfully decrypted

### Then

The decrypted Pseudonym and the additional fields from EP/SignedEP are returned in the response message

### Description

Mapping AC tests:

happy flow
-- different OINs
-- different schemeKeySetVersion
-- different recipientKeySetVersions
-- different target recipientKeySetVersion for closingKey
-- ECSchnorr


NB: Diagnostic information will be tested in the specific logging story BSNKEIDDO-4533

The *auditElement* and *signatureValue* have no static values and will change when new test data is generated.
When new test data is generated by Logius, the corresponding expected test results are produced as well.

The *diversifier* element is not present in the generated test data.


Scenario 1: SchemeKeySetVersion 1 for OIN A, RKSV A, CKSV A - target closingKey = empty
---------------------------------------------------------------------------------------------------------
Tags: @bsnkeiddo-4817@

* Create OASSignedEncryptedPseudonymRequest
    | propertyName                            | propertyValue                                     | propertyFilter       |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | signedEncryptedPseudonym                | {{ scenario_1.request.signedEncryptedPseudonym    | binary             }}|
    | schemeKeys                              | {{ scenario_1.request.schemeKeys                  | schemeKeys         }}|
    | serviceProviderKeys                     | {{ scenario_1.request.serviceProviderKeys         | serviceProviderKeys}}|
    | targetClosingKey                        | {{ scenario_1.request.targetClosingKey            | string             }}|
* Send OASSignedEncryptedPseudonymRequest
* Expect response matches
    | actualValue                             | expectedValue                                     | expectedValueType    |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | statusCode                              | {{ scenario_1.expectations.statusCode             | string           }}  |
    | body                                    | {{ scenario_1.expectations.responseBody           | json             }}  |
    | json.decodedInput.signedEP.auditElement | {{ scenario_1.expectations.auditValue             | string_resource  }}  |
    | json.decodedInput.signatureValue        | {{ scenario_1.expectations.signatureValue         | string_signature }}  |
    | json.decodedPseudonym.pseudonymValue    | {{ scenario_1.expectations.pseudonymValue         | string_resource  }}  |
* Fail if expectations are not met




Scenario 2: SchemeKeySetVersion 10 for OIN B, RKSV B, CKSV B - target closingKey = RKSV B
---------------------------------------------------------------------------------------------------------
Tags: @bsnkeiddo-4818@

* Create OASSignedEncryptedPseudonymRequest
    | propertyName                            | propertyValue                                     | propertyFilter       |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | signedEncryptedPseudonym                | {{ scenario_2.request.signedEncryptedPseudonym    | binary             }}|
    | schemeKeys                              | {{ scenario_2.request.schemeKeys                  | schemeKeys         }}|
    | serviceProviderKeys                     | {{ scenario_2.request.serviceProviderKeys         | serviceProviderKeys}}|
    | targetClosingKey                        | {{ scenario_2.request.targetClosingKey            | string             }}|
* Send OASSignedEncryptedPseudonymRequest
* Expect response matches
    | actualValue                             | expectedValue                                     | expectedValueType    |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | statusCode                              | {{ scenario_2.expectations.statusCode             | string          }}   |
    | body                                    | {{ scenario_2.expectations.responseBody           | json            }}   |
    | json.decodedInput.signedEP.auditElement | {{ scenario_2.expectations.auditValue             | string_resource }}   |
    | json.decodedInput.signatureValue        | {{ scenario_2.expectations.signatureValue         | string_signature}}   |
    | json.decodedPseudonym.pseudonymValue    | {{ scenario_2.expectations.pseudonymValue         | string_resource }}   |
* Fail if expectations are not met




Scenario 3: Matching Pdd-, Pcd- and ipp-key and 1 different Pdd-, Pcd- and ipp-key - target closingKey = empty
--------------------------------------------------------------------------------------------------------------
Tags: @bsnkeiddo-4819@

An extra ipp-key with another schemeKeySetVersion and an extra pdd-key and pcd-key for another service provider is passed.

* Create OASSignedEncryptedPseudonymRequest
    | propertyName                            | propertyValue                                     | propertyFilter       |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | signedEncryptedPseudonym                | {{ scenario_3.request.signedEncryptedPseudonym    | binary             }}|
    | schemeKeys                              | {{ scenario_3.request.schemeKeys                  | schemeKeys         }}|
    | serviceProviderKeys                     | {{ scenario_3.request.serviceProviderKeys         | serviceProviderKeys}}|
    | targetClosingKey                        | {{ scenario_3.request.targetClosingKey            | string             }}|
* Send OASSignedEncryptedPseudonymRequest
* Expect response matches
    | actualValue                             | expectedValue                                     | expectedValueType    |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | statusCode                              | {{ scenario_3.expectations.statusCode             | string          }}   |
    | body                                    | {{ scenario_3.expectations.responseBody           | json            }}   |
    | json.decodedInput.signedEP.auditElement | {{ scenario_3.expectations.auditValue             | string_resource }}   |
    | json.decodedInput.signatureValue        | {{ scenario_3.expectations.signatureValue         | string_signature}}   |
    | json.decodedPseudonym.pseudonymValue    | {{ scenario_3.expectations.pseudonymValue         | string_resource }}   |
* Fail if expectations are not met



Scenario 4: RKSV C, CKSV B - target closingKey = RKSV B
-------------------------------------------------------------------------
Tags: @bsnkeiddo-4820@

Decrypting a deprecated SignedEncryptedPseudonym with RKSV C for a different targetClosingKeyVersion B matches
the decryption of SignedEncryptedPseudonym with RKSV B.

* Create OASSignedEncryptedPseudonymRequest
    | propertyName                            | propertyValue                                     | propertyFilter       |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | signedEncryptedPseudonym                | {{ scenario_4.request.signedEncryptedPseudonym    | binary             }}|
    | schemeKeys                              | {{ scenario_4.request.schemeKeys                  | schemeKeys         }}|
    | serviceProviderKeys                     | {{ scenario_4.request.serviceProviderKeys         | serviceProviderKeys}}|
    | targetClosingKey                        | {{ scenario_4.request.targetClosingKey            | string             }}|
* Send OASSignedEncryptedPseudonymRequest
* Expect response matches
    | actualValue                             | expectedValue                                     | expectedValueType    |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | statusCode                              | {{ scenario_4.expectations.statusCode             | string          }}   |
    | body                                    | {{ scenario_4.expectations.responseBody           | json            }}   |
    | json.decodedInput.signedEP.auditElement | {{ scenario_4.expectations.auditValue             | string_resource }}   |
    | json.decodedInput.signatureValue        | {{ scenario_4.expectations.signatureValue         | string_signature}}   |
    | json.decodedPseudonym.pseudonymValue    | {{ scenario_4.expectations.pseudonymValue         | string_resource }}   |
* Fail if expectations are not met





Scenario 5: RKSV C, CKSV B - target closingKey = RKSV B
----------------------------------------------------------------------------
Tags: @bsnkeiddo-4949@

Decrypting a deprecated SignedEncryptedPseudonym with RKSV C for a different targetClosingKeyVersion B matches
the decryption of SignedEncryptedPseudonym with RKSV B.

* Create OASSignedEncryptedPseudonymRequest
    | propertyName                            | propertyValue                                     | propertyFilter       |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | signedEncryptedPseudonym                | {{ scenario_5.request.signedEncryptedPseudonym    | binary             }}|
    | schemeKeys                              | {{ scenario_5.request.schemeKeys                  | schemeKeys         }}|
    | serviceProviderKeys                     | {{ scenario_5.request.serviceProviderKeys         | serviceProviderKeys}}|
    | targetClosingKey                        | {{ scenario_5.request.targetClosingKey            | string             }}|
* Send OASSignedEncryptedPseudonymRequest
* Expect response matches
    | actualValue                             | expectedValue                                     | expectedValueType    |
    |-----------------------------------------|---------------------------------------------------|----------------------|
    | statusCode                              | {{ scenario_5.expectations.statusCode             | string          }}   |
    | body                                    | {{ scenario_5.expectations.responseBody           | json            }}   |
    | json.decodedInput.signedEP.auditElement | {{ scenario_5.expectations.auditValue             | string_resource }}   |
    | json.decodedInput.signatureValue        | {{ scenario_5.expectations.signatureValue         | string_signature}}   |
    | json.decodedPseudonym.pseudonymValue    | {{ scenario_5.expectations.pseudonymValue         | string_resource }}   |
* Fail if expectations are not met
